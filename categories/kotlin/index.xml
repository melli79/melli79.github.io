<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Melchior&#39;s Homepage</title>
    <link>https://melli79.github.io/categories/kotlin/</link>
    <description>Recent content in Kotlin on Melchior&#39;s Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Dec 2021 21:39:52 +0100</lastBuildDate><atom:link href="https://melli79.github.io/categories/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>03B Leute können Heiraten</title>
      <link>https://melli79.github.io/post/03bpeoplecanmarry/</link>
      <pubDate>Wed, 22 Dec 2021 21:39:52 +0100</pubDate>
      
      <guid>https://melli79.github.io/post/03bpeoplecanmarry/</guid>
      <description>Heute wollen wir schauen, was Personen tun können.
3. Zwei Personen können heiraten. Wenn wir schon ein Modell von Menschen haben, dann sollten die auch wie Menschen leben können. Als erstes wollen sie heiraten können.
Was sind die Voraussetzungen zum Heiraten? Man braucht einen Mann, eine Frau (oder 2 Männer oder 2 Frauen), die müssen beide ledig sein und alt genug und dann werden sie Mann und Frau (oder Mann und Mann oder Frau und Frau).</description>
    </item>
    
    <item>
      <title>03 Daten und Leute</title>
      <link>https://melli79.github.io/post/03dataandpeople/</link>
      <pubDate>Wed, 22 Dec 2021 19:40:39 +0100</pubDate>
      
      <guid>https://melli79.github.io/post/03dataandpeople/</guid>
      <description>Heute soll es darum gehen, wie man Leute im Computer darstellt.
1. Was ist uns an Leuten wichtig? Ein echter Mensch ist 2&amp;ndash;200 kg schwer, besteht aus Haut, Muskeln, Knochen, &amp;hellip;, trägt Kleidung, &amp;hellip; . Die werden wahrscheinlich nicht in den Computer passen.
Stattdessen überlegen wir uns, was wir von einem Menschen darstellen wollen, d.h. wir bilden uns ein Modell.
Also ein Mensch hat
 einen festen Vornamen, einen Familiennamen, ein Geburtsdatum, ein Geschlecht, einen Vater, eine Mutter, vielleicht eine/n Ehepartner/in, vielleicht Kinder.</description>
    </item>
    
    <item>
      <title>02 If und Schlümpfe</title>
      <link>https://melli79.github.io/post/02ifandsmurfs/</link>
      <pubDate>Mon, 20 Dec 2021 20:30:46 +0100</pubDate>
      
      <guid>https://melli79.github.io/post/02ifandsmurfs/</guid>
      <description>Heute wollen wir Schlümpfe zählen. Das geht so:
 Wir fangen mit den normalen Zahlen bei 1 an: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, &amp;hellip;
  Dann ersetzen wir jede 5. Zahl durch Schlümpf entsprechend ihrem Vielfache:
  1  1, 2, 3, 4, Schlümpf, 6, 7, 8, 9, 2 Schlümpf, 11, 12, 13, 14, 3 Schlümpf, 16, ...   die 25 ist Schlümpf-Schlümpf.</description>
    </item>
    
    <item>
      <title>22 Statistik und Geschlecht</title>
      <link>https://melli79.github.io/post/22statistics/</link>
      <pubDate>Sun, 19 Dec 2021 20:25:47 +0100</pubDate>
      
      <guid>https://melli79.github.io/post/22statistics/</guid>
      <description>Heute wollen wir uns fragen, wie der Computer am Namen erkennen kann, ob jemand Mann oder Frau ist.
1. Woran erkennt man, ob jemand weiblich ist? Natürlich ist der Vorname nicht die einzige Quelle, anhand derer man das entscheiden kann, z.B. kann man oft auch am Surf- oder Kaufverhalten herausfinden, ob jemand Mann (Junge) oder Frau (Mädchen) ist.
Auch ist es nicht immer ganz eindeutig, ob jemand Mann oder Frau ist, z.</description>
    </item>
    
    <item>
      <title>01 For-Schleifen</title>
      <link>https://melli79.github.io/post/01loops/</link>
      <pubDate>Sat, 18 Dec 2021 23:21:50 +0100</pubDate>
      
      <guid>https://melli79.github.io/post/01loops/</guid>
      <description>Nachdem Ihr die Programmierumgebung aufgesetzt habt, fangen wir heute mit einem ersten kleinen Programm an: Das kleine 1x1.
Das Ziel Das Ziel soll etwa folgende Tabelle sein:
 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100  Was wollen wir haben: Zeilen 1.</description>
    </item>
    
  </channel>
</rss>
